# Plik: .github/workflows/run_cron.yml
name: 'Cykl Symulacji AI (Cron)'

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' 

jobs:
  run-simulations:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout kodu
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 

      # 2. Setup Python 3.10
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      # 3. Instalacja kluczowych zale≈ºno≈õci systemowych
      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential

      # 4. üöÄ KROK DIAGNOSTYCZNY: Tworzenie VENV i Sprawdzenie Struktury
      - name: CREATE VENV AND VERIFY
        id: venv_test
        run: |
          # Tworzymy VENV
          python -m venv venv_test_xgboost
          echo "### STWORZONO VENV ###"
          ls -F venv_test_xgboost/bin/
          
          # Ustawiamy PATH, co jest niezbƒôdne do poprawnej aktywacji
          echo "PATH=$PWD/venv_test_xgboost/bin:$PATH" >> $GITHUB_ENV
          
      # 5. Instalacja i Test (Bez u≈ºycia "source activate")
      - name: INSTALL XGBoost and NLTK into VENV
        # U≈ºywamy PATH ustawionego w poprzednim kroku, aby wywo≈Çaƒá pip i python
        run: |
          pip install -r requirements.txt --upgrade --no-cache-dir
          
          echo "### WERYFIKACJA INSTALACJI ###"
          python -c "import xgboost; print('XGBoost jest widoczny w Python PATH!')"
          python -c "import nltk; nltk.download('vader_lexicon')"

      # 6. Uruchomienie g≈Ç√≥wnego skryptu symulacji
      - name: Run Multi-Simulations and Aggregate
        # Teraz uruchamiamy skrypt, kt√≥ry powinien widzieƒá pakiety
        run: python run_multiple_simulations_crypto.py
