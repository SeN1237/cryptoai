# Plik: .github/workflows/run_cron.yml
name: 'Cykl Symulacji AI (Cron)'

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' 

jobs:
  run-simulations:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout kodu
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 

      # 2. Setup Python 3.10
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      # 3. Instalacja kluczowych zale≈ºno≈õci systemowych
      - name: Install System Dependencies
        # build-essential jest kluczowe dla kompilacji C/C++ (XGBoost)
        run: sudo apt-get update && sudo apt-get install -y build-essential

      # 4. üöÄ KRYTYCZNY KROK: Uruchomienie VENV i Instalacja Zale≈ºno≈õci
      - name: Setup VENV and Install Dependencies
        # 4a. Tworzymy VENV
        run: python -m venv venv_xgboost
        
      # 4b. Instalujemy pakiety u≈ºywajƒÖc interpreter VENV
      - name: Install Packages into VENV
        # U≈ºywamy ≈õcie≈ºki do pip w VENV, aby mieƒá 100% pewno≈õci
        run: |
          ./venv_xgboost/bin/pip install -r requirements.txt --upgrade --no-cache-dir
          ./venv_xgboost/bin/pip install xgboost
          
      # 5. Pobranie danych NLTK (dla sentymentu VADER)
      - name: Download NLTK data
        run: ./venv_xgboost/bin/python -c "import nltk; nltk.download('vader_lexicon')"

      # 6. DIAGNOSTYKA: Potwierdzenie instalacji
      - name: Verify XGBoost Installation
        run: ./venv_xgboost/bin/python -c "import xgboost; print('XGBoost is installed successfully.')"
        
      # 7. Uruchomienie g≈Ç√≥wnego skryptu symulacji W ≈öCIE≈ªCE VENV
      - name: Run Multi-Simulations and Aggregate
        # U≈ºywamy pe≈Çnej ≈õcie≈ºki do interpretera Pythona w VENV
        run: ./venv_xgboost/bin/python run_multiple_simulations_crypto.py
